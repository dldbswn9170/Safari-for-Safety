{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nexport const useKakaoMap = ({\n  selectedProvince,\n  selectedCity,\n  locationData,\n  apiKey\n}) => {\n  _s();\n  const mapContainer = useRef(null);\n  const [map, setMap] = useState(null);\n\n  // 카카오 맵 초기화\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=${apiKey}&autoload=false`;\n    script.async = true;\n    script.onload = () => {\n      window.kakao.maps.load(() => {\n        const province = locationData[selectedProvince];\n        const options = {\n          center: new window.kakao.maps.LatLng(province.lat, province.lng),\n          level: province.level\n        };\n        const mapInstance = new window.kakao.maps.Map(mapContainer.current, options);\n        setMap(mapInstance);\n      });\n    };\n    document.head.appendChild(script);\n    return () => {\n      document.head.removeChild(script);\n    };\n  }, []);\n\n  // 지역 변경시 지도 이동 및 줌\n  useEffect(() => {\n    var _locationData$selecte, _locationData$selecte2;\n    if (!map) return;\n    let coords;\n    let level;\n    if (selectedCity && (_locationData$selecte = locationData[selectedProvince]) !== null && _locationData$selecte !== void 0 && (_locationData$selecte2 = _locationData$selecte.cities) !== null && _locationData$selecte2 !== void 0 && _locationData$selecte2[selectedCity]) {\n      const city = locationData[selectedProvince].cities[selectedCity];\n      coords = new window.kakao.maps.LatLng(city.lat, city.lng);\n      level = city.level;\n    } else {\n      const province = locationData[selectedProvince];\n      coords = new window.kakao.maps.LatLng(province.lat, province.lng);\n      level = province.level;\n    }\n    map.setLevel(level);\n    map.panTo(coords);\n  }, [map, selectedProvince, selectedCity, locationData]);\n  return {\n    mapContainer,\n    map\n  };\n};\n_s(useKakaoMap, \"zXmx6UI9gNvzkpGgSwTGHsl0s5w=\");","map":{"version":3,"names":["useState","useEffect","useRef","useKakaoMap","selectedProvince","selectedCity","locationData","apiKey","_s","mapContainer","map","setMap","script","document","createElement","src","async","onload","window","kakao","maps","load","province","options","center","LatLng","lat","lng","level","mapInstance","Map","current","head","appendChild","removeChild","_locationData$selecte","_locationData$selecte2","coords","cities","city","setLevel","panTo"],"sources":["/Users/dawn/Documents/SFS/sfs/src/hooks/useKakaoMap.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport const useKakaoMap = ({ selectedProvince, selectedCity, locationData, apiKey }) => {\n  const mapContainer = useRef(null);\n  const [map, setMap] = useState(null);\n\n  // 카카오 맵 초기화\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=${apiKey}&autoload=false`;\n    script.async = true;\n    \n    script.onload = () => {\n      window.kakao.maps.load(() => {\n        const province = locationData[selectedProvince];\n        const options = {\n          center: new window.kakao.maps.LatLng(province.lat, province.lng),\n          level: province.level\n        };\n        const mapInstance = new window.kakao.maps.Map(mapContainer.current, options);\n        setMap(mapInstance);\n      });\n    };\n\n    document.head.appendChild(script);\n    return () => {\n      document.head.removeChild(script);\n    };\n  }, []);\n\n  // 지역 변경시 지도 이동 및 줌\n  useEffect(() => {\n    if (!map) return;\n    let coords; \n    let level;\n\n    if (selectedCity && locationData[selectedProvince]?.cities?.[selectedCity]) {\n      const city = locationData[selectedProvince].cities[selectedCity];\n      coords = new window.kakao.maps.LatLng(city.lat, city.lng);\n      level = city.level;\n    } else {\n      const province = locationData[selectedProvince];\n      coords = new window.kakao.maps.LatLng(province.lat, province.lng);\n      level = province.level;\n    }\n\n    map.setLevel(level);\n    map.panTo(coords);\n  }, [map, selectedProvince, selectedCity, locationData]);\n\n  return { mapContainer, map };\n};\n\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEnD,OAAO,MAAMC,WAAW,GAAGA,CAAC;EAAEC,gBAAgB;EAAEC,YAAY;EAAEC,YAAY;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACvF,MAAMC,YAAY,GAAGP,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACQ,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CF,MAAM,CAACG,GAAG,GAAG,0CAA0CR,MAAM,iBAAiB;IAC9EK,MAAM,CAACI,KAAK,GAAG,IAAI;IAEnBJ,MAAM,CAACK,MAAM,GAAG,MAAM;MACpBC,MAAM,CAACC,KAAK,CAACC,IAAI,CAACC,IAAI,CAAC,MAAM;QAC3B,MAAMC,QAAQ,GAAGhB,YAAY,CAACF,gBAAgB,CAAC;QAC/C,MAAMmB,OAAO,GAAG;UACdC,MAAM,EAAE,IAAIN,MAAM,CAACC,KAAK,CAACC,IAAI,CAACK,MAAM,CAACH,QAAQ,CAACI,GAAG,EAAEJ,QAAQ,CAACK,GAAG,CAAC;UAChEC,KAAK,EAAEN,QAAQ,CAACM;QAClB,CAAC;QACD,MAAMC,WAAW,GAAG,IAAIX,MAAM,CAACC,KAAK,CAACC,IAAI,CAACU,GAAG,CAACrB,YAAY,CAACsB,OAAO,EAAER,OAAO,CAAC;QAC5EZ,MAAM,CAACkB,WAAW,CAAC;MACrB,CAAC,CAAC;IACJ,CAAC;IAEDhB,QAAQ,CAACmB,IAAI,CAACC,WAAW,CAACrB,MAAM,CAAC;IACjC,OAAO,MAAM;MACXC,QAAQ,CAACmB,IAAI,CAACE,WAAW,CAACtB,MAAM,CAAC;IACnC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAX,SAAS,CAAC,MAAM;IAAA,IAAAkC,qBAAA,EAAAC,sBAAA;IACd,IAAI,CAAC1B,GAAG,EAAE;IACV,IAAI2B,MAAM;IACV,IAAIT,KAAK;IAET,IAAIvB,YAAY,KAAA8B,qBAAA,GAAI7B,YAAY,CAACF,gBAAgB,CAAC,cAAA+B,qBAAA,gBAAAC,sBAAA,GAA9BD,qBAAA,CAAgCG,MAAM,cAAAF,sBAAA,eAAtCA,sBAAA,CAAyC/B,YAAY,CAAC,EAAE;MAC1E,MAAMkC,IAAI,GAAGjC,YAAY,CAACF,gBAAgB,CAAC,CAACkC,MAAM,CAACjC,YAAY,CAAC;MAChEgC,MAAM,GAAG,IAAInB,MAAM,CAACC,KAAK,CAACC,IAAI,CAACK,MAAM,CAACc,IAAI,CAACb,GAAG,EAAEa,IAAI,CAACZ,GAAG,CAAC;MACzDC,KAAK,GAAGW,IAAI,CAACX,KAAK;IACpB,CAAC,MAAM;MACL,MAAMN,QAAQ,GAAGhB,YAAY,CAACF,gBAAgB,CAAC;MAC/CiC,MAAM,GAAG,IAAInB,MAAM,CAACC,KAAK,CAACC,IAAI,CAACK,MAAM,CAACH,QAAQ,CAACI,GAAG,EAAEJ,QAAQ,CAACK,GAAG,CAAC;MACjEC,KAAK,GAAGN,QAAQ,CAACM,KAAK;IACxB;IAEAlB,GAAG,CAAC8B,QAAQ,CAACZ,KAAK,CAAC;IACnBlB,GAAG,CAAC+B,KAAK,CAACJ,MAAM,CAAC;EACnB,CAAC,EAAE,CAAC3B,GAAG,EAAEN,gBAAgB,EAAEC,YAAY,EAAEC,YAAY,CAAC,CAAC;EAEvD,OAAO;IAAEG,YAAY;IAAEC;EAAI,CAAC;AAC9B,CAAC;AAACF,EAAA,CAjDWL,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}